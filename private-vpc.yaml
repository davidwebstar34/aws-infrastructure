AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Provides Session Manager access without an Internet Gateway to an instance in
  a private subnet.
Parameters:
  MyPassword:
    Type: 'String'
    NoEcho: true
  LatestAMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  CIDR:
    Type: String
    Default: 10.0.0.0/24
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
  InstanceType:
    Type: String
    Default: t2.micro
    Description: Select a valid instance type for your Region
    AllowedValues:
      - t2.micro
      - t3.micro
      - m4.large
      - m5.large
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref CIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
  SSMVPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref SecurityGroupVPCEndpoint
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
  SSMMessagesVPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref SecurityGroupVPCEndpoint
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
  EC2MessagesVPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref SecurityGroupVPCEndpoint
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceRole
  EC2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref LatestAMI
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PrivateSubnet
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref SecurityGroupEC2Instance
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  SecurityGroupEC2Instance:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for EC2 Instance
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - Description: allow outbound HTTPS to the VPC
          CidrIp: !Ref CIDR
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
  SecurityGroupVPCEndpoint:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for VPC Endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: allow inbound HTTPS from the EC2 instance
          SourceSecurityGroupId: !Ref SecurityGroupEC2Instance
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        - Description: allow outbound HTTPS to the VPC
          CidrIp: !Ref CIDR
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  # Remove this part if you dont want to use this test user
  CloudshellUser:
    Type: AWS::IAM::User
    Properties: 
      LoginProfile: 
        Password:
          Ref: MyPassword
      UserName: ApplicationDeveloper              
  CloudshellPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      Users: 
        - !Ref CloudshellUser
      PolicyName: CloudshellAccess
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'cloudshell:*'
            Resource: '*'
          - Effect: Deny
            Action: 
              - "cloudshell:GetFileDownloadUrls"
              - "cloudshell:GetFileUploadUrls"
            Resource: '*'  
          - Effect: Allow
            Action: 
              - "ssm:DescribeSessions"
              - "ssm:StartSession"
            Resource: '*'
          - Effect: Allow
            Action: 'ssm:TerminateSession'
            # Use {aws:userid} with SSO or STS 
            Resource: 'arn:aws:ssm:*:*:session/${aws:username}-'        
